#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<errno.h>//for error handling
#include<stdbool.h>//for boolean operations
#define LENGTH 125
#define string_length 25

struct customerInfo
{
	int customerAuto;
	int accountNum;
	char first_name[string_length];
	char last_name[string_length];
	char parish[string_length];
	int SpecEdAmount;
}; //end customerInfo

struct bookStock
{
    int productid;
    char book[string_length];
    char genre[string_length];
    float price;
    int quantity;
};//end bookStock

int autocreateIndex(int autoGeneratedIndex)//function generates and writes index to a file
{
	FILE*fileIndex;//file pointer


    int index;

    // CHECK FILE OPENS FUNC 
	if((fileIndex = fopen("auto", "w"))==NULL)//Open file in write mode
	{
		printf("Cannot open file \n");//Error Message
		exit(1);
	}//end if

	else
    {
		index=autoGeneratedIndex;
		/*printing data tofile*/
  	    fprintf(fileIndex,"%d",index);//writes the generated index to the record.
	    fclose(fileIndex);/*close file*/
    }//end else
}//end function

int readAutoIndex() //reads index from the file
{
    FILE*readAutoIndex;//file pointer

   	int autoIndex,ans;

    /*Open file in read */
	if ((readAutoIndex= fopen("auto", "r"))==NULL)//If an error occurs while opening file
 	{
  		printf("Cannot open file \n");//Error message
        exit(errno);
    }/*end if*/

	else
    {
        fscanf(readAutoIndex,"%d",&autoIndex);//read index
        ans=autoIndex;
	    //read and display every line in the file

    	while(!feof(readAutoIndex))//while not the end of the file
       	{
        	fscanf(readAutoIndex,"%d",&autoIndex);//Read from file
        }//end while

        return ans;
        fclose(readAutoIndex);  /*close file*/

     }//end else
}//end function

void enqueueCustomerInfo()
{
    FILE*sec;
    FILE*fir;
    int enqueueId;

    struct customerInfo info={0,0,"","","",0};

    /// CHECK FILE OPENS FUNC 
     /*Open file in read mode*/
	if ((sec= fopen("OrderQueue", "rb+"))==NULL)//open binary file for reading and writing
    {
        printf("Cannot open file \n");//Error message
        exit(1);
    }/*end if*/

    if ((fir= fopen("OrderID", "r"))==NULL)//open binary file for reading and writing
    {
        printf("Cannot open file \n");//Error message
        exit(1);
    }/*end if*/
    /// END OF FUNC 

    int Auto=readAutoIndex()+1;  //get index from auto file
    printf("auto is %d",Auto);

    
    // TURN INTO FUNC TO CHECK IF QUEUE IS FULL? 

    if(Auto==(LENGTH-1))//determines whether or not the queue is full
    {
        printf("Queue full.\n");
    }//end if

    else
    {
        Auto=Auto+1;//determine position to write the entered record to in the file

        fscanf(fir,"%d",&enqueueId);
        fseek(sec,(enqueueId)*sizeof(struct customerInfo),SEEK_SET);//find point in file to write the record
        fwrite(&info,sizeof(struct customerInfo),1,sec);//write the record

    }//end else

    fclose(sec);//close the file
    autocreateIndex(Auto);//close the file

}//end of function

int dequeueCustomerInfo()//Function removes customer information from the queue
{
	FILE*fir;//file pointer
	FILE*sec;

    int g,val;

	struct customerInfo info={0,0,"","","",0};
    struct customerInfo blankInfo={0,0,"","","",0};

    /// GOING IN TO SEEING IF FILE IS THERE FUNC FROM ENQUEUE

    //opening a pointer to the file
    if ((sec = fopen("OrderQueue", "rb+"))==NULL)//If an error occurs while opening file
    {
        printf("Cannot open file \n");//Error message
        exit(1);
    }/*end if*/

     //opening another  pointer to the file
    if ((fir = fopen("OrderQueue", "rb+"))==NULL)//If an error occurs while opening file
    {
        printf("Cannot open file \n");//Error message
        exit(1);
    }/*end if*/

    //

    int deleteNum=readAutoIndex();//CALL TO FUNCTION WHICH RETURNS THE INDEX VALUE FROM THE AUTOFILE

    /* Check for error situation*/
    if(deleteNum<0)
    {
        printf("FILE IS EMPTY. NO RECORDS PRESENT\n");
    }//end if

    else
    {
        // MIGHT TURN INTO FUNC FOR NO RECORDS 

        fseek(sec,(0)*sizeof(struct customerInfo),SEEK_SET);//SEEK RECORD TO DELETE,I.E THE FIRST
        fread(&info,sizeof(struct customerInfo),1,sec);//READ RECORD TO DELETE
        /*Read Mode*/

        if(info.customerAuto==0)// IF THERE IS NO RECORD
        {
            printf("============================================================\n\n");

            printf("            !!!!!!RECORD DOES NOT EXIST!!!!!!               \n\n");

            printf("============================================================\n\n");
        }/*end if*/

        if(info.customerAuto!=0)//IF RECORD EXISTS
        {
            fseek(sec,(1-1)*sizeof(struct customerInfo),SEEK_SET);
            fwrite(&blankInfo,sizeof(struct customerInfo),1,sec);//OVERWRITE RECORD WITH A BLANK ONE

            val=info.accountNum;

            //**************Moving up Records in file AFTER the delete**************

            for(g=0;g<deleteNum;g++)
            {
                fseek(sec,(g)*sizeof(struct customerInfo),SEEK_SET);//find   point  G in file

			    fseek(fir,( g+1)*sizeof(struct customerInfo),SEEK_SET);//find point (G+1) in file

                fread(&info,sizeof(struct customerInfo),1,fir);    //READ  record IN SLOT (G+1) OF FILE

			    info.customerAuto=g+1;

                fwrite(&info,sizeof(struct customerInfo),1,sec);//write the record IN SLOT (G+1) OF FILE TO SLOT G
            }//end for

            autocreateIndex(deleteNum-1);//index decremented by 1 after delete and its new value written to the file

        }//end if

        fclose(sec);//close pointer to the file
        fclose(fir);//close second pointer to the file

    } //end if

   return val;

} //end function

int stockMenu()//menu provides user with a list of options
{
	int choice;

	printf("\n");

	printf("============================================================\n\n");
	printf("OPTION              DESCRIPTION                   \n\n");
    printf("============================================================\n\n");

	printf("1               Create a new customer file\n\n");

	printf("2               Create a new stock file\n\n");

	printf("3               Add Customer Information\n\n");

	printf("4               Add Stock Information\n\n");

	printf("5               Display Customer information \n\n");

	printf("6               Display Stock Information\n\n");

	printf("7               Place Order\n\n");

	printf("8               View Special Edition Orders\n\n");

	printf("9               Create a Bill\n\n");

	printf("10              Update Customer Information\n\n");

	printf("11              Update Stock\n\n");

	printf("12              Delete a record\n\n");

	printf("13              Exit program\n\n");

    printf("===========================================================\n\n");
	printf("=>=>=>=>=>=>=>      Moonlight Bookstore      =>=>=>=>=>=>=>\n\n");
	printf("===========================================================\n\n");

	printf("Enter task: ");
    scanf("%d",&choice);

	while(choice>13||choice<1)//error handling for menu options
	{
		printf("Choice not valid\n");//error message
		printf("Enter Task: ");
		scanf("%d",&choice);
	}//end while

	return choice;

}//end menu function

void password()// function containing password
{
    int tries;
	char password[]="touchdown";//password which allows access to program
    char entered[string_length];//password entered by user

	tries=3;//chances to enter password

    printf("Enter password\n");
    scanf("%s",&entered);

    while(strcmp(password,entered)!=0)// if password entered by user is not the correct password
    {
        printf("ACCESS DENIED!\n\n");//Error Message
        tries=tries-1;// Number of tries decreases with each incorrect entry

	    if(tries==0)//If the number of tries reaches 0
		{
			exit(1);// Program terminates
		}//end if

	    printf("Enter password\n");
        scanf("%s",&entered);
	}// end while

    printf("Access Granted\n");
   	system("Pause");

}// end of password function

void createCustfile()// Menu option 1 which creates a new file to store customer information
{
    FILE*sec;// file pointer
    FILE*fir;

    int f;
    autocreateIndex(-1);

    struct customerInfo info={0,0,"","","",0};

    // AGAIN TRYING TO OPEN FILE FUNC- CHECK ENQUEUE FUNC

    /*Open file in write mode*/
    if(((sec=fopen("Customerfile", "wb"))==NULL)||((fir=fopen("OrderQueue", "wb"))==NULL))//If an error occurs while opening file
    {
        printf("Cannot open file\n");// Error message
        exit(1);
    }/*end if*/
    //

    else
    {
        // MIGHT TURN THIS INTO A WRITING FUNC? IDK
        for (f=0;f<=100;f++)
        {
            fwrite(&info,sizeof(struct customerInfo),1,sec);
            fwrite(&info,sizeof(struct customerInfo),1,fir);
        } /*end for*/

        fclose(sec);// closing file
        fclose(fir);
    }/*end else*/

    printf("============================================================\n\n");

    printf("                        FILE CREATED                        \n\n");

    printf("============================================================\n\n");

    system("Pause");
}// end of function

void createStockfile()// Menu option 2 which creates a new file to store stock information
{
    FILE*fir;// file pointer

    int f;

    struct bookStock stock={0,"","",0.0,0};

    // AGAIN WITH THE WRITE FUNC- CHECK ENQUEUE FUNC
    /*Open file in write mode*/
    if((fir=fopen("stockfile", "wb"))==NULL)//if an error occurs while opening file
    {
        printf("Cannot open file\n");// error message
        exit(1);
    }/*end if*/

    else
    {
        for (f=0;f<=100;f++)
        {
            fwrite(&stock,sizeof(struct bookStock),1,fir);
        }/*end for*/

        fclose(fir);// closing file
    }/*end else*/

    printf("============================================================\n\n");

    printf("                       FILE CREATED                         \n\n");

    printf("============================================================\n\n");

    system("Pause");
}// end of function

void addcustomer()//Menu option 3 which records customer information
{
   	printf("============================================================\n\n");

	printf("                      Add Customer Info                     \n\n");

	printf("============================================================\n\n");

    FILE*sec;// file pointer
    int accNum;

    struct customerInfo info={0,0,"","","",0};

    // AGAIN WITH THE WRITE FUNC - YOU KNOW THE DO 
    if ((sec=fopen("Customerfile", "rb+"))==NULL)//open binary file for reading and writing
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/

    printf("Enter customer account number.\n");
    scanf("%d",&accNum);

    // INVALID NUMBER FUNC - using customer and book as parameters 
	while(accNum<=0)//if zero or a negative number is entered
	{
		printf("Account number invalid.\n");
		printf("Enter customer account number.\n");
   		scanf("%d",&accNum);
	}

	fseek(sec,(accNum-1)*sizeof(struct customerInfo),SEEK_SET);
    fread(&info,sizeof(struct customerInfo),1,sec);

    //MAYBE AN ALREADY EXISTS FUNC 
	while(info.accountNum!=0)//while the account number already exists
	{
		printf("That account number already exists\n");

  		printf("Enter customer account number.\n");
    	scanf("%d",&accNum);

        //INVALID NUMBER FUNC
		while(accNum<=0)
		{
			printf("Account number invalid.\n");
			printf("Enter customer account number.\n");
   			scanf("%d",&accNum);
		}

		fseek(sec,(accNum-1)*sizeof(struct customerInfo),SEEK_SET);
    	fread(&info,sizeof(struct customerInfo),1,sec);
	}

	info.accountNum=accNum;//copy the information in the variable being searched into the strcuture

    printf("Enter first name:");
    scanf("%s",&info.first_name);

    printf("Enter last name:");
    scanf("%s",&info.last_name);

    printf("Enter parish:");
    scanf("%s",&info.parish);

    fseek(sec,(info.accountNum-1)*sizeof(struct customerInfo),SEEK_SET);
    fwrite(&info,sizeof(struct customerInfo),1,sec);

    fclose(sec);
}//end function

void addstock()// Menu option 4 which records stock information
{
	printf("============================================================\n\n");

	printf("                        Add Stock                           \n\n");

	printf("============================================================\n\n");

    FILE*fir;// file pointer
    FILE*book;
    int ID,quan;

    struct bookStock stock={0,"","",0.0,0};

    // CHECKING IF FILE EXISTS FUNC BABEY
    if((fir=fopen("stockfile","rb+"))==NULL)// open file in read mode
    {
        printf("Cannot open file\n");// error message
        exit(1);
    }// end if

	if((book=fopen("booksLeft","w"))==NULL)// open file in read mode
    {
        printf("Cannot open file\n");// error message
        exit(1);
    }// end if

    printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");
    printf("\n\t\t\tADD STOCK RECORDS\n\n");
    printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

    printf("Enter book ID.\n");
    scanf("%d",&ID);

    // INVALID NUMBER FUNC 
    while(ID<=0)
	{
		printf("Book ID invalid.\n");
		printf("Enter book ID.\n");
   		scanf("%d",&ID);
	}

    fseek(fir,(ID-1)*sizeof(struct bookStock),SEEK_SET);
    fread(&stock,sizeof(struct bookStock),1,fir);

    // ALREADY EXISTS FUNC - uses same parameters as invalid func.. maybe 
    
    while(stock.productid!=0) //  book ID already exists 
    {
    	printf("That ID already Exists\n");
    	printf("Enter book ID\n");
	    scanf("%d",&ID);

    	while(ID<=0)
		{
			printf("Book ID invalid.\n");
			printf("Enter book ID.\n");
	   		scanf("%d",&ID);
		}

	    fseek(fir,(ID-1)*sizeof(struct bookStock),SEEK_SET);
    	fread(&stock,sizeof(struct bookStock),1,fir);
	}

	stock.productid=ID;

    printf("Enter book name: ");
    scanf("%s",&stock.book);

	printf("Enter book genre: ");
    scanf("%s",&stock.genre);

	printf("Enter book price: ");
    scanf("%f",&stock.price);

	while(stock.price<=0)// Error handling for price of stock
    {
    	printf("Invalid entry. Try again\n");
        printf("Enter book price: ");
        scanf("%f",&stock.price);
    }// end while

	printf("Enter available quantity for sale: ");
    scanf("%d",&stock.quantity);

	while(stock.quantity<0)// Error handling for book quantity
    {
    	printf("Invalid entry. Try again\n");
        printf("Enter available quantity for sale: ");
        scanf("%d",&stock.quantity);
    }
    
    // I ASSUME THIS IS A TEST 
    
    //if (stock.productid==13)
    //{
    //	quan=stock.quantity;
    //    fprintf (book,"%d",quan);
    //}
    
    fseek(fir,(stock.productid-1)*sizeof(struct bookStock),SEEK_SET);
    fwrite(&stock,sizeof(struct bookStock),1,fir);

    fclose(fir);// close file
    fclose(book);
}

void displayCustomer()//Menu option 5 which displays customer information
{
    FILE*sec;// file pointer

    int noholder;

    struct customerInfo info={0,0,"","","",0};


    // CHECK IF FILE EXISTS FUNC 
    if ((sec=fopen("Customerfile", "rb+"))==NULL)//open binary file for reading and writing
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/

    else
    {
		printf("============================================================\n\n");
        printf("             \n\n\n\t\t\tCUSTOMER RECORDS                   \n\n");
        printf("============================================================\n\n");

        /*read and display every line in the file*/
        printf("Enter Account Number:\n");
        scanf("%d",&noholder);

        fseek(sec,(noholder-1)*sizeof(struct customerInfo),SEEK_SET);
  		fread(&info,sizeof(struct customerInfo),1,sec);

        // COULD BE A FUNC - COME BACK TO THIS ONE 
        while(info.accountNum!=noholder)
        {
        	printf("============================================================\n\n");

			printf("             !!!!!!RECORD HAS NO INFORMATION!!!!!!          \n\n");

    		printf("============================================================\n\n");

    		printf("Enter Account Number:\n");
  			scanf("%d",&noholder);

        	fseek(sec,(noholder-1)*sizeof(struct customerInfo),SEEK_SET);
  			fread(&info,sizeof(struct customerInfo),1,sec);
		}

		if(info.accountNum==noholder)
        {
	        printf("First Name: %s\nLast Name: %s\nParish:\t%s\nAccount Number:\t%d\n\n",info.first_name,info.last_name,info.parish,info.accountNum);
        }

        fseek(sec,(info.accountNum-1)*sizeof(struct customerInfo),SEEK_SET);
        fwrite(&info,sizeof(struct customerInfo),1,sec);
	}//end else
	fclose(sec);
	system("pause");
}

void displayStock()//menu option 6 which displays stock information
{
    FILE*fir;// file pointer

    int noholder;

    struct bookStock stock={0,"","",0.0,0};

    // CHECK IF FILE EXISTS FUNC 
    if ((fir=fopen("Stockfile", "rb+"))==NULL)//open binary file for reading and writing
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/

    else
    {
         printf("============================================================\n\n");
         printf("             \n\n\n\t\t\tBOOK RECORDS                   \n\n");
         printf("============================================================\n\n");
         /*read and display every line in the file*/

         printf("Enter product ID:\n");
         scanf("%d",&noholder);

         fseek(fir,(noholder-1)*sizeof(struct bookStock),SEEK_SET);
  		 fread(&stock,sizeof(struct bookStock),1,fir);

         // CUSTOMER AND STOCK NO RECORD FUNC - almost same param as book and customer invalid func 
         while(stock.productid!=noholder)
         {
         	printf("============================================================\n\n");

			printf("             !!!!!!RECORD HAS NO INFORMATION!!!!!!          \n\n");

    		printf("============================================================\n\n");

    		printf("Enter product ID:\n");
      		scanf("%d",&noholder);

        	fseek(fir,(noholder-1)*sizeof(struct bookStock),SEEK_SET);
  		 	fread(&stock,sizeof(struct bookStock),1,fir);
		 }

		 if(stock.productid==noholder)
         {
             printf("Book Name:%s\nGenre:\t%s\nPrice:\t%.2f\nQuantity: %d\n\n",stock.book,stock.genre,stock.price,stock.quantity);
         }

         fseek(fir,(stock.productid-1)*sizeof(struct bookStock),SEEK_SET);
         fwrite(&stock,sizeof(struct bookStock),1,fir);
         fclose(fir);
    }//end else
    system("pause");
}

void placeOrder()//Menu option 7 which accepts pre-orders
{
	printf("============================================================\n\n");

	printf("               Pre-Order Special Edition Book               \n\n");

	printf("============================================================\n");

	FILE*sec;
	FILE*fir;
	FILE*third;
	FILE*book;
	FILE*fourth;
	int specialID,amount,identification,quan,enqueueId;

	struct customerInfo info={0,0,"","","",0};
	struct bookStock stock={0,"","",0.0,0};

    // CHECKING IF FILE EXISTS FUNC 
    if ((sec=fopen("Customerfile", "rb+"))==NULL)//open binary file for reading and writing
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/

	if ((third=fopen("OrderQueue", "rb+"))==NULL)//open binary file for reading and writing
    {
        printf("Cannot open file\n");
        exit(1);
    }/*end if*/

    if((fir=fopen("stockfile","rb+"))==NULL)// open file in read mode
    {
        printf("Cannot open file\n");// error message
        exit(1);
    }// end if

    if((book=fopen("booksLeft","r"))==NULL)// open file in read mode
    {
        printf("Cannot open file\n");// error message
        exit(1);
    }// end if

    if((fourth=fopen("OrderID","w"))==NULL)// open file in read mode
    {
        printf("Cannot open file\n");// error message
        exit(1);
    }// end if

    specialID=13;

    fseek(fir,(specialID-1)*sizeof(struct bookStock),SEEK_SET);
    fread(&stock,sizeof (struct bookStock),1,fir);
    /*Read Mode*/

    fscanf(book,"%d",&quan);

    printf("\n\n%d Books left \n",quan);

    if (quan==0)
    {
        printf ("SOLD OUT. ORDER CANNOT BE PLACED.\n");
    }
	else
	{
		printf ("\nEnter the customer's account no.\n");
		scanf ("%d",&identification);

		fseek(sec,(identification-1)*sizeof(struct customerInfo),SEEK_SET);
		fread(&info,sizeof (struct customerInfo),1,sec);
		/*Read Mode*/

        // DOES NOT EXIST FUNC - WOULD WE NOT USE TE SAME AS displayStock FUNC?
		while(info.accountNum==0)
		{
		    printf("===============================================================\n\n");
		    printf("       This record has no information or does not exist.       \n\n");
		    printf("===============================================================\n");

		    printf ("\nEnter the customer's account number.\n");
		    scanf ("%d",&identification);

		    fseek(sec,(identification-1)*sizeof(struct customerInfo),SEEK_SET);
		    fread(&info,sizeof (struct customerInfo),1,sec);
		    /*Read Mode*/

	    }/*end while*/

	    if(info.accountNum!=0)
	    {
            enqueueId=info.accountNum;
            fprintf(fourth,"%d",enqueueId);

	        int passAuto=readAutoIndex();
	        info.customerAuto=readAutoIndex()+2;
	        printf("customer auto is %d",info.customerAuto);

	        printf ("\nEnter the amount of books being ordered:\n");
	        scanf ("%d",&amount);

	        while ((amount>quan)||(amount<=0))
	        {
	            printf("\nINVALID AMOUNT. MAY NOT HAVE ENOUGH STOCK \n");

	            printf ("\nEnter the amount of books being ordered:\n");
	            scanf ("%d",&amount);
	        }
	        fclose(book);

            // FILE CHECK FUNC AGAIN 
	        if((book=fopen("booksLeft","w"))==NULL)// open file in read mode
	        {
	            printf("Cannot open file\n");// error message
	            exit(1);
	        }// end if

	        info.SpecEdAmount=amount;
	        quan=quan-amount;
            stock.quantity=quan;

            fseek(fir,(specialID-1)*sizeof(struct bookStock),SEEK_SET);
            fwrite(&stock,sizeof (struct bookStock),1,fir);
            /*Write Mode*/

	        fprintf(book,"%d",quan);

	        enqueueCustomerInfo();

	        printf("ORDER HAS BEEN ADDED TO THE QUEUE.\n");

	        fclose(fir);
	        fclose(sec);
	        fclose(book);
        	fclose(third);
        	fclose(fourth);
    	}
    }
}

void view()//menu option 8 which displays the order list
{
    FILE*sec;
    struct customerInfo info={0,0,"","","",0};

    int Auto=readAutoIndex();//get index

    //FILE CHECK FUNC 
    if ((sec= fopen("OrderQueue", "rb+"))==NULL)
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/

    printf("============================================================\n\n");
    printf("           			  \tVIEW ORDER QUEUE                    \n\n");
    printf("============================================================\n");
	/*read and display every line in the file*/

	printf("Number of orders:%d\n",Auto+1);

    while(!feof(sec)&&info.customerAuto>=Auto+1)//WHILE THE END OF FILE HAS NOT BEEN REACHED
    //for
    {
       fread(&info,sizeof(struct customerInfo),1,sec);
       if(info.accountNum!=0)
       {
            printf("Position in Queue: %d\nAccount Number: %d\n",info.customerAuto,info.accountNum);
            printf("First Name: %s\nLast Name: %s\n",info.first_name,info.last_name);
            printf("Parish: %s\nAmount Ordered: %d\n",info.parish,info.SpecEdAmount);

            printf("============================================================\n");
       }/*end if*/
    }/*end while*/
    fclose(sec);//CLOSE FILE
    system("Pause");
}

void Bill()//Menu option 9 which generates a bill
{
    FILE*fir;// file pointer
    FILE*sec;// file pointer
    FILE*third;

    int searchid,bookcount,sold,booksale,booksalequantity,specialID;
    float totalprice,price,payment,change,more;
    char answer[string_length];

    specialID=13;

    bookcount=0;//initialize bookcount at 0
    totalprice=0;// initialize totalprice at 0

    struct bookStock stock={0,"","",0.0,0};

    if((fir=fopen("stockfile","rb+"))==NULL)// open file in read mode
    {
        printf("Cannot open file\n");
        exit(1);
    }// end if

    else
    {
        printf("Is this for a special order delivery?\n");
        scanf ("%s",&answer);

        while((stricmp("yes",answer)!=0)||(stricmp("no", answer) != 0))
        {
        	printf("Answer not valid, type yes or no\n");

        	 printf("Is the person collecting an Special Edition Order?\n");
       		 scanf ("%s",&answer);
		}

        if (stricmp("yes",answer)==0)
        {   
            // SPECIAL EDITION ORDER SALE FUNC 
            struct customerInfo info={0,0,"","","",0};

            // CHECK FILE EXISTS FUNC
            if((third=fopen("OrderQueue","rb+"))==NULL)// open file in read mode
            {
                printf("Cannot open file\n");
                exit(1);
            }// end if

            fseek(third,(0)*sizeof(struct customerInfo),SEEK_SET);//SEEK RECORD
            fread(&info,sizeof(struct customerInfo),1,third);//READ RECORD
            /*Read Mode*/

            
            if(info.customerAuto==0)// IF THERE IS NO RECORD
            {
                printf("============================================================\n\n");

                printf("       THIS RECORD DOES NOT EXIST WITHIN THE SYSTEM         \n\n");

                printf("============================================================\n");
            }/*end if*/
            else
            {
                printf("\tCustomer Account No.: %d \n\tCustomer's Name: %s\t%s \n\t",info.accountNum,info.first_name,info.last_name);
                printf ("Parish of Residence: %s\n\tAmount Ordered: %d\n",info.parish,info.SpecEdAmount);

                fseek(fir,(specialID-1)*sizeof(struct bookStock),SEEK_SET);
                fread(&stock,sizeof (struct bookStock),1,fir);
                /*Read Mode*/

                // CHECK FILE EXISTS FUNC
                if((sec=fopen("cashregister","w"))==NULL)// open file in write mode
                {
                    printf("Cannot open file\n");
                    exit(1);
                }// end if
                fclose(sec);// close file

                if((sec=fopen("cashregister","a"))==NULL)// open file in append mode
                {
                    printf("Cannot open file\n");
                    exit(1);
                }// end if

                fprintf(sec,"%d\t%d\n",stock.productid,info.SpecEdAmount);
                stock.quantity=stock.quantity-info.SpecEdAmount;

                price=stock.price*info.SpecEdAmount;

                fseek(fir,(specialID-1)*sizeof(struct bookStock),SEEK_SET);
                fwrite(&stock,sizeof(struct bookStock),1,fir);

                printf("Total: %.2f\n",price);
                printf("Enter amount paid: \n");
                scanf("%f",&payment);

				while(payment<price)
				{
					more=price-payment;
					printf("NOT ENOUGH MONEY.$ %.2f more is needed\n",more);
					printf("Enter amount paid: \n");
          			scanf("%f",&payment);
				}

                fclose(sec);// close file

                // CHECK IF FILE EXISTS FUNC
                if((sec=fopen("cashregister","r"))==NULL)// open file in read mode
                {
                    printf("Cannot open file\n");
                    exit(1);
                }// end if

                // RECEIPT FUNC MAYBE?
                printf("============================================================\n\n");

                printf("      =>=>=>=>=>=>=> MOONLIGHT BOOKSTORE =>=>=>=>=>=>=>     \n\n");

                printf("============================================================\n");

                printf("Quantity\t\tBook\t\tPrice\n");
                fscanf(sec,"%d%d",&specialID,&info.SpecEdAmount);

                fseek(fir,(specialID-1)*sizeof(struct bookStock),SEEK_SET);
                fread(&stock,sizeof(struct bookStock),1,fir);

                printf("    %d\t\t%s\t\t$%.2f\n",info.SpecEdAmount,stock.book,stock.price);

                change=payment-price;

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

                printf ("Total\t\t\t\t\t\t$%.2f\n\n",price);

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

                printf ("Cash Amount\t\t\t$%.2f %\n",payment);
                printf ("Change\t\t\t$%.2f \n",change);

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

                printf("||==||==||==||==WE LOOK FORWARD TO YOUR NEXT VISIT==||==||==||==||\n\n");

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

                fseek(fir,(stock.productid-1)*sizeof(struct bookStock),SEEK_SET);
                fwrite(&stock,sizeof(struct bookStock),1,fir);

                int ids=dequeueCustomerInfo();
            }
        }
        else
        { 
            // MAYBE MAKE THIS ENTIRE THING INTO A FUNC?
            printf("Enter IDs of books being sold. Enter -1 when finished\n");
            scanf("%d",&searchid);

            fseek(fir,(searchid-1)*sizeof(struct bookStock),SEEK_SET);
            fread(&stock,sizeof(struct bookStock),1,fir);

            // CHECK IF FILE EXISTS FUNC
            if((sec=fopen("cashregister","w"))==NULL)// open file in write mode
            {
                printf("Cannot open file\n");
                exit(1);
            }// end if
            fclose(sec);// close file

            if((sec=fopen("cashregister","a"))==NULL)// open file in append mode
            {
                printf("Cannot open file\n");
                exit(1);
            }// end if

            while(searchid!=-1)
            {
                if(stock.productid==0)
                {
                    printf("============================================================\n\n");

                    printf("       THIS RECORD DOES NOT EXIST WITHIN THE SYSTEM         \n\n");

                    printf("============================================================\n");
                }// end if

                if(stock.productid!=0)
                {
                    printf("Enter number of books being sold\n");
                    scanf("%d",&booksalequantity); // should be  bookSaleQuantity dafuq me 

                    while(booksalequantity>stock.quantity)
                    {
                    	printf("Not enough in stock. Only %d available\n",stock.quantity);
                    	printf("Enter number of books being sold\n");
                   		scanf("%d",&booksalequantity);
					}

                    stock.quantity=stock.quantity-booksalequantity;

					fprintf(sec,"%d\t%d\n",searchid,booksalequantity);

                    price=stock.price*booksalequantity;
                    totalprice=totalprice+price;

                    fseek(fir,(stock.productid-1)*sizeof(struct bookStock),SEEK_SET);
                    fwrite(&stock,sizeof(struct bookStock),1,fir);
                }// end if

                printf("Enter IDs of books being sold. Enter -1 when finished\n");
                scanf("%d",&searchid);

                fseek(fir,(searchid-1)*sizeof(struct bookStock),SEEK_SET);
                fread(&stock,sizeof(struct bookStock),1,fir);
            }// end while

            printf("Total: %.2f\n",totalprice);
            printf("Enter amount paid: \n");
            scanf("%f",&payment);

			while(payment<totalprice)
			{
				more=totalprice-payment;
				printf("NOT ENOUGH MONEY. $ %.2f needed\n",more);
				printf("Enter amount paid: \n");
       			scanf("%f",&payment);
			}

            fclose(sec);// clpse file

            if((sec=fopen("cashregister","r"))==NULL)// open file in read mode
            {
                printf("Cannot open file\n");
                exit(1);
            }// end if

            // RECEIPT FUNC 
			printf("============================================================\n\n");

            printf("      =>=>=>=>=>=>=> MOONLIGHT BOOKSTORE =>=>=>=>=>=>=>     \n\n");

            printf("============================================================\n");

            printf("Quantity\t\tBook\t\tPrice\n");
            fscanf(sec,"%d%d",&searchid,&booksalequantity);

            fseek(fir,(searchid-1)*sizeof(struct bookStock),SEEK_SET);
            fread(&stock,sizeof(struct bookStock),1,fir);

            while(!feof(sec))// while it is not the end of the file
            {
                if(searchid==stock.productid)
                {
                    printf("    %d\t\t\t%s\t\t\t$%.2f\n",booksalequantity,stock.book,stock.price);
                }// end if

                fscanf(sec,"%d%d",&searchid,&booksalequantity);

                fseek(fir,(searchid-1)*sizeof(struct bookStock),SEEK_SET);
                fread(&stock,sizeof(struct bookStock),1,fir);
            }// end while

            change=payment-totalprice;

            printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

            printf ("Total\t\t\t$%.2f\n\n",totalprice);

            printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

            printf ("Cash Amount\t\t\t\t\t$%.2f %\n",payment);
            printf ("Change\t\t\t\t\t\t$%.2f \n",change);

            printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

			printf("||==||==||==||==WE LOOK FORWARD TO YOUR NEXT VISIT==||==||==||==||\n\n");

			printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

            fseek(fir,(stock.productid-1)*sizeof(struct bookStock),SEEK_SET);
            fwrite(&stock,sizeof(struct bookStock),1,fir);
        }
        fclose(sec);// close file
        fclose(fir);// close file
    }// end else
}// end of function

void UpdateCustInfo()//menu option 10 used to update customer information
{
    FILE*sec;

    int identification;
    char updateOption[string_length],updateFirstName[string_length], updateLastName[string_length];
    char updateParish[string_length];

    struct customerInfo info={0,0,"","","",0};
    
    // CHECK FILE OPENS FUNC 
    if ((sec=fopen("Customerfile", "rb+"))==NULL)//open binary file for reading and writing
    {
        printf("Cannot open file \n");
        exit(1);
    }/*end if*/

    else
    {
        printf ("Enter the customer's account number.\n");
        scanf ("%d",&identification);

        fseek(sec,(identification-1)*sizeof(struct customerInfo),SEEK_SET);
        fread(&info,sizeof (struct customerInfo),1,sec);
        /*Read Mode*/

        // COULD BE A NO INFO OR DO NOT EXIST FUNC 
        while(info.accountNum==0)
        {
            printf("===============================================================\n\n");

			printf("       This record has no information or does not exist.       \n\n");

			printf("===============================================================\n");

            printf ("Enter the customer's account number.\n");
            scanf ("%d",&identification);

            fseek(sec,(identification-1)*sizeof(struct customerInfo),SEEK_SET);
            fread(&info,sizeof (struct customerInfo),1,sec);
            /*Read Mode*/
        }/*end while*/

        if(info.accountNum!=0)
        {
            printf("\nCustomer Account No.: %d \nCustomer's Name: %s %s \n",info.accountNum,info.first_name,info.last_name);
            printf ("Parish of Residence: %s\n",info.parish);

            printf("===============================================================\n");

            printf ("Enter slot in which you are updating: Name (Enter 'first' or 'last') or Parish of Residence.\n");
            scanf ("%s",&updateOption);

            while ((stricmp("first",updateOption)!=0)&&(stricmp("last",updateOption)!=0)&&(stricmp("parish",updateOption)!=0))
            {
                printf("\n=========================================\n");

				printf("       This option does not exist.       \n\n");

				printf("=========================================\n");

                printf ("Enter slot in which you are updating: Name (Enter 'first' or 'last') or Parish of Residence.\n");
                scanf ("%s",&updateOption);

            } //end while

            // UPDATE FUNC?

            if (stricmp("first",updateOption)==0)
            {
                printf ("Customer's Previous Name: %s \n",info.first_name);

                printf ("Enter the customer's new name.\n");

                scanf ("%s",&updateFirstName);

                strcpy(info.first_name,updateFirstName);

            }  //end if
            if (stricmp("last",updateOption)==0)
            {
                printf ("Customer's Previous Name:%s \n",info.last_name);

                printf ("Enter the customer's new name.\n");

                scanf ("%s",&updateLastName);

                strcpy(info.last_name,updateLastName);

            }  //end if
            if (stricmp("parish",updateOption)==0)
            {
                printf ("Customer's Previous Parish: %s \n",info.parish);

                printf ("Enter the customer's new parish of residence.\n");

                scanf("%s",&updateParish);

                strcpy (info.parish,updateParish);

            } //end if
        } //end if

        printf("\n\t\t\t===============================\n\n");

	    printf("\t\t\t       UPDATE COMPLETED.       \n\n");

	    printf("\t\t\t===============================\n");

        printf("\tCustomer Account No.: %d \n\tCustomer's Name: %s\t%s \n\t",info.accountNum,info.first_name,info.last_name);
        printf ("Parish of Residence: %s\n",info.parish);

        printf("===============================================================\n");

        fseek(sec,(info.accountNum-1)*sizeof(struct customerInfo),SEEK_SET);
        fwrite(&info,sizeof(struct customerInfo),1,sec);
        /* Write Mode */
    } //end else

    fclose(sec); //Closing of the binary file ' MemberFile ' read+ mode
}

void updatestock()//menu option 11 used to update stock information
{
    FILE*sec;// file pointer
    FILE*book;

    int identification,updateBookQuantity,quan;
    char updateOption[string_length];
    char updateBookName[string_length];
    char updateBookGenre[string_length];
    float updateBookPrice;

    struct bookStock stock={0,"","",0.0,0};

    if((sec=fopen("stockfile","rb+"))==NULL)// open file in read mode
    {
        printf("Cannot open file\n");// error message
        exit(1);
    }// end if

    if((book=fopen("booksLeft","w"))==NULL)// open file in read mode
    {
        printf("Cannot open file\n");// error message
        exit(1);
    }// end if

    else
    {
        printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

        printf("                 UPDATE STOCK RECORDS                 \n\n");

        printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

        printf("Enter book id to update: ");
        scanf("%d",&identification);

        fseek(sec,(identification-1)*sizeof(struct bookStock),SEEK_SET);
        fread(&stock,sizeof(struct bookStock),1,sec);
        /*Read Mode*/

        //  RECORD DOES NOT EXIST FUNC?

        while (stock.productid==0)
        {
            printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

            printf("            THIS RECORD DOES NOT EXIST                  \n\n");

            printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

            printf("Enter book id to update: ");
            scanf("%d",&identification);

            fseek(sec,(identification-1)*sizeof(struct bookStock),SEEK_SET);
            fread(&stock,sizeof(struct bookStock),1,sec);
            /*Read Mode*/
        }/*end while*/

        if(stock.productid!=0)
        {
            printf("Book id:%d\n",stock.productid);
            printf("Book Name:%s\n",stock.book);

            printf("Book genre:%s\n",stock.genre);
            printf("Book price:%.2f\n",stock.price);

            printf("Book quantity:%d\n",stock.quantity);

            printf("What needs to be updated: \n");
            scanf("%s",&updateOption);

            while((stricmp("name",updateOption)!=0)&&(stricmp("genre",updateOption)!=0)&&(stricmp("price",updateOption)!=0)&&(stricmp("quantity",updateOption)!=0))
            {
                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

                printf("            INVALID ENTRY                  \n\n");

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

                printf("What needs to be updated: \n");
                scanf("%s",&updateOption);
            }// end while

            // UPDATE FUNC 
            if(stricmp("name",updateOption)==0)
            {
                printf("Previous name:%s\n",stock.book);
                printf("Enter new book name:\n");
                scanf("%s",&updateBookName);

                strcpy(stock.book,updateBookName);

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

                printf("                      Update Completed                   \n\n");

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

                printf("Book id:%d\n",stock.productid);
                printf("Book:%s\n",stock.book);

                printf("Book genre:%s\n",stock.genre);
                printf("Book price:%.2f\n",stock.price);

                printf("Book quantity:%d\n",stock.quantity);

                fseek(sec,(stock.productid-1)*sizeof(struct bookStock),SEEK_SET);
                fwrite(&stock,sizeof(struct bookStock),1,sec);
            }// end if

            if(stricmp("genre",updateOption)==0)
            {
                printf("Previous genre:%s\n",stock.genre);
                printf("Enter new genre:\n");
                scanf("%s",&updateBookGenre);

                strcpy(stock.genre,updateBookGenre);

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

                printf("                   Update Completed                   \n\n");

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

                printf("Book id:%d\n",stock.productid);
                printf("Book:%s\n",stock.book);

                printf("Book genre:%s\n",stock.genre);
                printf("Book price:%.2f\n",stock.price);

                printf("Book quantity:%d\n",stock.quantity);

                fseek(sec,(stock.productid-1)*sizeof(struct bookStock),SEEK_SET);
                fwrite(&stock,sizeof(struct bookStock),1,sec);
            }// end if

            if((stricmp("price",updateOption)==0))
            {
                printf("Previous price:%.2f\n",stock.price);
                printf("Enter new price:\n");
                scanf("%f",&updateBookPrice);

                stock.price=updateBookPrice;

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

                printf("                      Update Completed                   \n\n");

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

                printf("Book id:%d\n",stock.productid);
                printf("Book:%s\n",stock.book);

                printf("Book genre:%s\n",stock.genre);
                printf("Book price:%.2f\n",stock.price);

                printf("Book quantity:%d\n",stock.quantity);

                fseek(sec,(stock.productid-1)*sizeof(struct bookStock),SEEK_SET);
                fwrite(&stock,sizeof(struct bookStock),1,sec);
            }// end if

            if((stricmp("quantity",updateOption)==0))
            {
                printf("Previous quantity:%d\n\n",stock.quantity);
                printf("Enter new quantity:\n");
                scanf("%d",&updateBookQuantity);

                stock.quantity=updateBookQuantity;
				quan=updateBookQuantity;
                fprintf(book,"%d",quan);

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n\n");

                printf("                      Update Completed                   \n\n");

                printf("||==||==||==||==||==||==||==||==||==||==||==||==||==||\n");

                printf("Book id:%d\n",stock.productid);
                printf("Book:%s\n",stock.book);

                printf("Book genre:%s\n",stock.genre);
                printf("Book price:%.2f\n",stock.price);

                printf("Book quantity:%d\n",stock.quantity);

                fseek(sec,(stock.productid-1)*sizeof(struct bookStock),SEEK_SET);
                fwrite(&stock,sizeof(struct bookStock),1,sec);
            }// end if
        }// end if
    }//end else
    fclose(sec);// close file
    fclose(book);
}// end of function

void Delete()//stock menu option 12 used to delete a record
{
	FILE*sec;
	FILE*fir;

	int erase,proID,accNum;

	printf("Delete stock info (1) or customer info (2)\n");
	scanf("%d",&erase);

	while((erase!=1)||(erase!=2))
	{
		printf("Error! Cannot delete that field.\n");
		printf("Delete stock info (1) or customer info (2)\n");
		scanf("%d",&erase);
	}

	if(erase==1)//selected to delete stock
	{
		struct bookStock stock={0,"","",0.0,0};
		struct bookStock BlankStock={0,"","",0.0,0};

        //CHECK FILE OPENS FUNC 
		if((fir=fopen("stockfile","rb+"))==NULL)// open file in read mode
   		{
        	printf("Cannot open file\n");// error message
     		exit(1);
   		}// end if

        // PUT THIS OUTSIDE IFS
   		printf("==============================================\n\n");

		printf("          \t\t DELETE RECORDS                 \n\n");

   		printf("==============================================\n");

   		printf("Enter Product ID to delete\n");
   		scanf("%d",&proID);

   		fseek(fir,(proID-1)*sizeof(struct bookStock),SEEK_SET);
  		fread(&stock,sizeof(struct bookStock),1,fir);


        // RECORD HAS NO INFO FUNC 
		while(stock.productid==0)
		{
			printf("============================================================\n\n");

			printf("             !!!!!!RECORD HAS NO INFORMATION!!!!!!          \n\n");

   			printf("============================================================\n");

   			printf("Enter Product ID to delete\n");
   			scanf("%d",&proID);

   			fseek(fir,(proID-1)*sizeof(struct bookStock),SEEK_SET);
  			fread(&stock,sizeof(struct bookStock),1,fir);
		}//endwhile

		if(stock.productid!=0)
		{
            //DELETE FUNC 

			fseek(fir,(stock.productid-1)*sizeof(struct bookStock),SEEK_SET);

			fwrite(&BlankStock,sizeof(struct bookStock),1,fir);

			printf("==============================================\n\n");

			printf("          \t\t DELETE COMPLETE                \n\n");

    		printf("==============================================\n");
		}//end if

		fclose(fir);
	}//end Delete Stock

	if(erase==2)//selected to delete customer info
	{
		struct customerInfo info={0,0,"","","",0};
		struct customerInfo blankInfo={0,0,"","","",0};

        //CHECK FILE OPENS FUNC 
		if ((sec=fopen("Customerfile", "rb+"))==NULL)//open binary file for reading and writing
    	{
        	printf("Cannot open file \n");
        	exit(1);
		}/*end if*/

		printf("==============================================\n\n");

		printf("          \t\t DELETE RECORDS                 \n\n");

   		printf("==============================================\n\n");

   		printf("Enter Account Number to delete\n");
   		scanf("%d",&accNum);

   		fseek(sec,(accNum-1)*sizeof(struct customerInfo),SEEK_SET);

		fread(&info,sizeof(struct customerInfo),1,sec);

        // RECORD NO INFO FUNC 
		while(info.accountNum==0)
		{
        	printf("============================================================\n\n");

			printf("             !!!!!!RECORD HAS NO INFORMATION!!!!!!          \n\n");

    		printf("============================================================\n\n");

			printf("Enter Account Number to delete\n");
   			scanf("%d",&accNum);

   			fseek(sec,(accNum-1)*sizeof(struct customerInfo),SEEK_SET);

			fread(&info,sizeof(struct customerInfo),1,sec);
   		}//end while

		if(info.accountNum!=0)
		{
            // DELETE FUNC 

			fseek(sec,(info.accountNum-1)*sizeof(struct customerInfo),SEEK_SET);

			fwrite(&blankInfo,sizeof(struct customerInfo),1,sec);

			printf("==============================================\n\n");

			printf("          \t\t DELETE COMPLETE                \n\n");

    		printf("==============================================\n\n");
		}	//end if
		fclose(sec);
	}//end customer delete
}//end delete function

int main()
{
	FILE*sec;
	FILE*fir;

	int result;
	autocreateIndex(-1);

	password();//call to password function

	result=stockMenu();//call to Stock menu option


    //TASKCHOICE FUNC 

	while(result!=13)
	{

		if(result==1)// menu option 1 which creates a file
        {//start of if
            createCustfile();// call to create file function
            result=stockMenu();// call to function stockMenu
        }/*end if*/

        if(result==2)// menu option 2 which creates a file
        {//start of if
            createStockfile();// call to create file function
            result=stockMenu();// call to function stockMenu
        }/*end if*/

        if(result==3)// menu option 3 prompts user for information to fill record
        {
            addcustomer();// call to addcustomer function
            result=stockMenu();// call to function stockMenu
        }//end if

        if(result==4)// Menu option 4 prompts user for information to fill stock record
        {
            addstock();//Call to addstock function
            result=stockMenu();//Call to menu function
        }//end if

        if(result==5)//menu option 5 which displays customer information
        {
        	displayCustomer();
        	result=stockMenu();
		}

		if(result==6)//menu option 6 which displays stock information
        {
        	displayStock();
        	result=stockMenu();
		}

	 	if(result==7)//menu option 7 which prompts the user to place an order
        {
        	placeOrder();
        	result=stockMenu();
		}

		if(result==8)//menu option 8 displays the order list
        {
        	view();
        	result=stockMenu();
		}

		if(result==9)//menu option 9 which generates a receipt
        {
        	Bill();
        	result=stockMenu();
		}

		if(result==10)//menu option 10 prompts user for information to update customer information
        {
        	UpdateCustInfo();
        	result=stockMenu();
		}

        if(result==11)// Menu option 11 prompts user for information to update stock record
        {
            updatestock();//Call to updatestock function
            result=stockMenu();//Call to menu function
        }// end if

        if(result==12)//Menu option 12 which deletes a record
        {
        	Delete();//call to Delete function
        	result=stockMenu();// call to menu function
		}//end if

	}//end while
}//end program
